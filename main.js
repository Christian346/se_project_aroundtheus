!function(){"use strict";var e=class{constructor(e,t){this._settings=e,this._form=t,this._inputList=[...this._form.querySelectorAll(e.inputSelector)],this._submitButton=this._form.querySelector(e.submitButtonSelector),this._inputSelector=e.inputSelector,this._inactiveButton=e.inactiveButtonClass,this._inputError=e.inputErrorClass,this._error=e.errorClass}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(){this._hasInvalidInput()?this.disabledButton():(this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1)}disabledButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}},t=class{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._id=e._id,this.isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButton=r,this._handleLikeClickButton=n}_setEventListeners(){this._element.querySelector(".card__image ").addEventListener("click",(()=>this._handleImageClick(this._name,this._link))),this._element.querySelector(".card__heart").addEventListener("click",(()=>this._handleLikeClickButton(this))),this._element.querySelector(".card__trashcan-btn").addEventListener("click",(()=>this._handleDeleteButton(this._id,this._element)))}toggleLikeButton(){this._element.querySelector(".card__heart").classList.toggle("card__heart_active")}_checkLikeState(){this.isLiked&&this._element.querySelector(".card__heart").classList.add("card__heart_active")}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getElementView(){return this._element=this._getTemplate(),this._element.querySelector(".card__image").src=this._link,this._element.querySelector(".card__image").alt=this._name,this._element.querySelector(".card__text").textContent=this._name,this._setEventListeners(),this._checkLikeState(),this._element}};class s{constructor(e,t){let{items:s,renderer:r}=e;this._initialArray=s,this._renderFunction=r,this._container=t}renderMethod(){this._initialArray.forEach((e=>{this._renderFunction(e)}))}addItem(e){this._container.prepend(e)}}const r=document.querySelector(".lowheader__editbutton"),n=document.querySelector(".modal_type_edit-js"),o=(n.querySelector(".modal__close"),document.querySelector(".lowheader__title"),document.querySelector(".lowheader__span"),document.querySelector("#profile-title-input")),i=document.querySelector("#profile-description-input"),a=document.querySelector(".modal_type_add-js"),l=document.querySelector("#add-button"),c=(a.querySelector("#add-close-button"),a.querySelector("#add-card-form")),d=(document.querySelector(".modal_type_picture-js"),document.querySelector("#picture-close-button"),document.querySelector(".modal__pictures"),document.querySelector(".modal__pictures_alt"),n.querySelector(".modal__form")),h=(document.querySelector(".card-template").content.firstElementChild,document.querySelector(".gallery")),u=(document.querySelectorAll(".modal"),document.querySelector(".card-template"),document.querySelector(".modal_type_delete_card-js"),document.querySelector(".lowheader__editpen")),_=document.querySelector("#changeprofilepic-form"),m={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class p{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._modalElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}}class S extends p{constructor(e){let{modalSelector:t,handleFormSubmit:s}=e;super({modalSelector:t}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._inputList=this._modalForm.querySelectorAll(".modal__input"),this._submitButton=this._modalElement.querySelector(".modal__button")}_getinputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getinputValues())})),super.setEventListeners()}close(){this._modalForm.reset(),super.close()}setLoadingButtonText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";if(e)return this._submitButton.textContent=t;this._submitButton.textContent="Save"}}const y=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>this._handleResponse(e)))}getInitialUser(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>this._handleResponse(e)))}setAvatarImage(e){return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((e=>this._handleResponse(e)))}setUserNameInfo(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:s})}).then((e=>this._handleResponse(e)))}postNewCard(e,t){return fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((e=>this._handleResponse(e)))}deleteACard(e){return fetch(`${this._baseUrl}/cards/${e}`,{headers:this._headers,method:"DELETE"}).then((e=>this._handleResponse(e)))}deleteTheCardLikeState(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"DELETE"}).then((e=>this._handleResponse(e)))}addTheCardLikeState(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"PUT"}).then((e=>this._handleResponse(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"de932c6e-7e22-469e-9495-2cd43cd1231b","Content-Type":"application/json"}}),E=new e(m,d),v=new e(m,c),L=new e(m,_);E.enableValidation(),v.enableValidation(),L.enableValidation();const b=new S({modalSelector:".modal_type_edit-js",handleFormSubmit:function(e){b.setLoadingButtonText(!0),y.setUserNameInfo(e).then((e=>{console.log(e),k.setUserInfo({name:e.name,description:e.about})})).catch(console.error).finally((()=>{b.setLoadingButtonText(!1)})),b.close()}});b.setEventListeners();const f=new S({modalSelector:".modal_type_add-js",handleFormSubmit:function(e){const t=e.title,s=e.link;y.postNewCard(t,s).then((e=>{const t=B(e);x.addItem(t),f.close()})).catch((e=>console.error(e))),v.disabledButton()}});f.setEventListeners();const g=new class extends p{constructor(e){let{modalSelector:t}=e;super({modalSelector:t})}open(e){const{name:t,link:s}=e;super.open(),this._modalElement.querySelector(".modal__pictures").setAttribute("src",s),this._modalElement.querySelector(".modal__pictures").alt=t,this._modalElement.querySelector(".modal__pictures_alt").textContent=t}}({modalSelector:".modal_type_picture-js"});g.setEventListeners();const k=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,AvatarSelector:r}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{userName:this._nameElement.textContent,userDescription:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,description:s}=e;t&&(this._nameElement.textContent=t),s&&(this._descriptionElement.textContent=s)}setUserAvatar(e){let{picture:t}=e;t&&(this._avatarElement.src=t)}}({nameSelector:".lowheader__title",descriptionSelector:".lowheader__span",AvatarSelector:".lowheader__img"}),q=new class extends p{constructor(e){let{modalSelector:t}=e;super({modalSelector:t}),this._submitButton=this._modalElement.querySelector(".modal__button"),this._initialText=this._submitButton.textContent.trim(),this._modalForm=this._modalElement.querySelector(".modal__form")}setSubmitAction(e){this._handleSubmitCallback=e}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitCallback()})),super.setEventListeners()}}({modalSelector:".modal_type_delete_card-js"});q.setEventListeners();const C=new S({modalSelector:".modal_type_changeprofilepic-js",handleFormSubmit:function(e){let{link:t}=e;y.setAvatarImage(t).then((e=>{console.log(e),k.setUserAvatar({picture:e.avatar}),C.close()})).catch((e=>console.log(">>ERROR",e)))}});function B(e){return new t(e,".card-template",w,U,I).getElementView()}function I(e){e.isLiked?e.isLiked&&y.deleteTheCardLikeState(e._id).then((()=>{e.isLiked=!1,e.toggleLikeButton()})).catch(console.error):y.addTheCardLikeState(e._id).then((()=>{e.isLiked=!0,e.toggleLikeButton()})).catch(console.error)}function w(e,t){g.open({name:e,link:t})}function U(e,t){q.open(),q.setSubmitAction((function(){y.deleteACard(e).then((()=>{t.remove(),q.close()}))}))}let x;C.setEventListeners(),r.addEventListener("click",(function(){const e=k.getUserInfo();o.value=e.userName,i.value=e.userDescription,b.open()})),l.addEventListener("click",(function(){f.open()})),u.addEventListener("click",(function(){C.open()})),y.getInitialCards().then((e=>{x=new s({items:e,renderer:e=>{!function(e){const t=B(e);x.addItem(t)}(e)}},h),x.renderMethod()})).catch((e=>console.log(">>ERROR",e))),y.getInitialUser().then((e=>{k.setUserInfo({name:e.name,description:e.about}),k.setUserAvatar({picture:e.avatar})})).catch((e=>console.log(">>ERROR",e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,